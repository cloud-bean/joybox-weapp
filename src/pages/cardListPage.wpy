<template>
  <view class="container">
    <i-modal title="{{ selectedCard.name }}" visible="{{ showCardModal }}" bind:ok="onCloseCardOK" show-cancel="{{false}}">
      <view style="display: block; padding: 5px;">{{ selectedCard.description || '~ ' }}</view>
      <i-tag style="display: inline-block; margin-right: 20px;">{{ selectedCard.category }}</i-tag>
      <i-tag style="display: inline-block; margin-right: 20px;">等级：Lv.{{ selectedCard.level }}</i-tag>
      <image style="display: block; margin: 10px auto; width: 80%" mode="widthFix" src="{{selectedCard.file.URL + '-card.large'}}"/>
    </i-modal>
    <view wx:if="{{cards.length > 0}}">
      <repeat for="{{cards}}" key="index" index="index" item="item">
        <image mode="scaleToFill" src="{{item.file.URL + '-card.normal'}}" class="card-image" @tap="openCardModal({{item}})"/>
      </repeat>
    </view>
    <view wx:else>
      暂无卡牌数据哦~
    </view>
    <view style="width: 100%">
      <i-page current="{{ page }}" total="{{ totalPage }}" bind:change="handlePageChange">
        <view slot="prev">
          <i-icon type="return"></i-icon>
          上一页
        </view>
        <view slot="next">
          下一页
          <i-icon type="enter"></i-icon>
        </view>
      </i-page>
    </view>
  </view>
</template>


<script>
  import wepy from 'wepy'
  import {
    connect
  } from 'wepy-redux'
  import {
    getCards
  } from '../store/actions'
  @connect({
    cards(state) {
      return state.card.cards
    },
    totalCount(state) {
      return state.card.totalCount
    }
  }, {
    getCards
  })
  export default class CardListPage extends wepy.page {
    config = {
      usingComponents: {
        'i-page': '/iview/page/index',
        'i-icon': '/iview/icon/index',
        'i-tag': '/iview/tag/index',
        'i-modal': '/iview/modal2/index'
      }
    }
    data = {
      page: 1,
      limit: 15,
      selectedCard: null,
      showCardModal: false
    }
    computed = {
      totalPage () {
        return Math.ceil(this.totalCount / this.limit)
      }
    }
    methods = {
      handlePageChange({ detail }) {
        const type = detail.type
        if (type === 'next') {
          this.page = this.page + 1
        } else if (type === 'prev') {
          this.page = this.page - 1
        }
        this.methods.getCards(this.page, this.limit)
      },
      openCardModal(item) {
        console.log('openCardModal', item)
        this.showCardModal = true
        this.selectedCard = item
      },
      onCloseCardOK () {
        this.showCardModal = false
        this.selectedCard = ''
      }
    }
    onReady() {
      this.methods.getCards(this.page, this.limit)
    }
  }
</script>

<style lang="less" scoped>
  .container {
    text-align: center;
    background-color: #f8f8f9;
  }
  .card-image {
    width: 96px;
    height: 150px;
    margin: 5px;
  }
</style>
