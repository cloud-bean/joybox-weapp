<style scoped>
  .tab-container {
    margin-top: 40px;
    padding: 10px;
  }
  .card-image {
    width: 128px;
    height: 198px;
  }
</style>

<template>
  <view>
    <i-tabs current="{{ current }}" fixed bindchange="handleChange">
      <i-tab key="tab1" title="我的背包">
      </i-tab>
      <i-tab key="tab2" title="二手交易市场">
      </i-tab>
      <i-tab key="tab3" title="购买官方卡包">
      </i-tab>
      <i-tab key="tab4" title="其他">
      </i-tab>
    </i-tabs>
    <view wx:if="{{ current === 'tab1' }}" class="tab-container">
      <view wx:if="{{myCards.length > 0}}">
        <repeat for="{{myCards}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{item.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.name }} {{ item.category }} {{ item.description }} {{item.created}}
          <i-button bind:click="sellCard({{item}})" type="success" shape="circle">出售</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无卡牌数据哦~
      </view>
    </view>
    <view wx:if="{{ current === 'tab2' }}" class="tab-container">
      <view wx:if="{{goods.length > 0}}">
        <repeat for="{{goods}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{item.detail.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.name }} - {{ item.price }} 悦币 - {{item.owner.displayName}} {{ item.created }}
          <i-button wx:if="{{ item && (userId == item.owner._id) }}" bind:click="revertCard({{item}})" type="warning" shape="circle">撤下</i-button>
          <i-button wx:else bind:click="buyCard({{item}})" type="success" shape="circle">购买</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无卡牌数据哦~
      </view>
    </view>
    <view wx:if="{{ current === 'tab3' }}" class="tab-container">
      官方卡包 cardPool
      <Button type="primary" @tap="buyCardPool({id: 123})">购买卡牌套餐</Button>
    </view>
    <view wx:if="{{ current === 'tab4' }}" class="tab-container">
      购买其他 征兆队伍，打开卷轴，团购。。
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import dayjs from '../utils/dayJS'
  import {
    connect
  } from 'wepy-redux'
  import {
    getMyBagCards,
    getAllGoods
  } from '../store/actions'
  import * as api from '../api/shop'
  @connect({
    myCards(state) {
      return state.shop.myBagCards.map((item) => {
        const newItem = { ...item
        }
        newItem.created = dayjs(new Date(item.created)).fromNow()
        return newItem
      })
    },
    userId(state) {
      return state.root.userId
    },
    totalCardsCount(state) {
      return state.shop.totalCardsCount
    },
    goods(state) {
      return state.shop.goods.map((item) => {
        const newItem = { ...item
        }
        newItem.created = dayjs(new Date(item.created)).fromNow()
        return newItem
      })
    },
    totalGoodsCount(state) {
      return state.shop.totalGoodsCount
    }
  }, {
    getMyBagCards,
    getAllGoods
  })
  export default class shopPage extends wepy.page {
    data = {
      myCardsPage: 1,
      myCardsLimit: 12,
      goodsPage: 1,
      goodsLimit: 6,
      current: 'tab1'
    }
    config = {
      usingComponents: {
        'i-tabs': '/iview/tabs/index',
        'i-tab': '/iview/tab/index',
        'i-button': '/iview/button/index'
      }
    }
    methods = {
      handleChange({
        detail
      }) {
        this.current = detail.key
      },
      transDate(created) {
        return dayjs(new Date(created)).fromNow()
      },
      async sellCard(item) {
        await api.sellCard({
          cardId: item.cardId,
          price: 30
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      async buyCard(item) {
        await api.buyGood({
          goodId: item._id
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      async revertCard(item) {
        await api.revertGood({
          goodId: item._id
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      buyCardPool(item) {
        console.log('buyCardpool', item)
      }
    }
    onReady() {
      this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
      this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
    }
  }
</script>
