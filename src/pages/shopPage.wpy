<style scoped>
  .tab-container {
    margin-top: 40px;
    padding: 10px;
  }
  .card-image {
    width: 128px;
    height: 198px;
  }
</style>

<template>
  <view>
    <i-message id="message" />
    <i-tabs current="{{ current }}" fixed bindchange="handleChange">
      <i-tab key="tab1" title="我的背包">
      </i-tab>
      <i-tab key="tab4" title="宝箱">
      </i-tab>
      <i-tab key="tab2" title="二手交易市场">
      </i-tab>
      <i-tab key="tab3" title="购买官方卡包">
      </i-tab>
    </i-tabs>
    <i-modal title="出售卡牌" visible="{{ isModalSellCardShow }}" bind:ok="handleSellCardOKClose" bind:cancel="handleSellCardCancelClose">
      <view>想卖多少个悦币：</view>
      <view style="color: rgba(238,95,105,0.57)">{{ msgErr }}</view>
      <view>
        <input value="{{modalSellCardMsg}}" type="number" bindinput="onModalSellCardMsgChanged" placeholder="" placeholder-style="color:red" />
      </view>
    </i-modal>
    <view wx:if="{{ current === 'tab1' }}" class="tab-container">
      <view wx:if="{{myCards.length > 0}}">
        <repeat for="{{myCards}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{item.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.name }} {{ item.category }} {{ item.description }} {{item.created}}
          <i-button @tap="tgMSellCardShow({{item.cardId}})" type="success" shape="circle">出售</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无卡牌数据哦~
      </view>
    </view>
    <view wx:if="{{ current === 'tab2' }}" class="tab-container">
      <view wx:if="{{goods.length > 0}}">
        <repeat for="{{goods}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{item.detail.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.name }} - {{ item.price }} 悦币 - {{item.owner.displayName}} {{ item.created }}
          <i-button wx:if="{{ item && (userId == item.owner._id) }}" bind:click="revertCard({{item}})" type="warning" shape="circle">撤下
          </i-button>
          <i-button wx:else bind:click="buyCard({{item}})" type="success" shape="circle">购买</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无卡牌数据哦~
      </view>
    </view>
    <view wx:if="{{ current === 'tab3' }}" class="tab-container">
      <view wx:if="{{cardPools.length > 0}}">
        <repeat for="{{cardPools}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{item.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.name }} - {{ item.ticketPrice }} 悦币 - 来自悦盒官方
          <i-button bind:click="buyCardPool({{item}})" type="success" shape="circle">购买</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无官方卡包哦~
      </view>
    </view>
    <view wx:if="{{ current === 'tab4' }}" class="tab-container">
      <view wx:if="{{myLotterys.length > 0}}">
        <repeat for="{{myLotterys}}" key="index" index="index" item="item">
          <image mode="scaleToFill" src="{{ item.cardPool.file.URL + '?imageView2/2/h/200/q/128|imageslim' || ''}}" class="card-image" /> {{ item.cardPool.name }} {{ item.cardPool.description }}
          <i-button bind:click="openLottery({{item._id}})" type="success" shape="circle">抽奖</i-button>
        </repeat>
      </view>
      <view wx:else>
        暂无宝箱哦~
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import dayjs from '../utils/dayJS'
  import {
    connect
  } from 'wepy-redux'
  import {
    getMyBagCards,
    getAllGoods,
    getMyLotterys,
    getCardPools
  } from '../store/actions'
  import * as api from '../api/shop'
  import {
    $Message
  } from '../iview/base/index'
  @connect({
    myCards(state) {
      return state.shop.myBagCards.map((item) => {
        const newItem = {
          ...item
        }
        newItem.created = dayjs(new Date(item.created)).fromNow()
        return newItem
      })
    },
    userId(state) {
      return state.root.userId
    },
    totalCardsCount(state) {
      return state.shop.totalCardsCount
    },
    goods(state) {
      return state.shop.goods.map((item) => {
        const newItem = {
          ...item
        }
        newItem.created = dayjs(new Date(item.created)).fromNow()
        return newItem
      })
    },
    cardPools(state) {
      return state.shop.cardPools
    },
    myLotterys(state) {
      return state.shop.myLotterys
    },
    totalGoodsCount(state) {
      return state.shop.totalGoodsCount
    }
  }, {
    getMyBagCards,
    getAllGoods,
    getMyLotterys,
    getCardPools
  })
  export default class shopPage extends wepy.page {
    data = {
      myCardsPage: 1,
      myCardsLimit: 40,
      goodsPage: 1,
      goodsLimit: 60,
      current: 'tab1',
      isModalSellCardShow: false,
      selectedCardId: '',
      modalSellCardMsg: '',
      msgErr: ''
    }
    config = {
      usingComponents: {
        'i-tabs': '/iview/tabs/index',
        'i-tab': '/iview/tab/index',
        'i-button': '/iview/button/index',
        'i-modal': '/iview/modal/index',
        'i-message': '/iview/message/index'
      }
    }
    clearModalSellCard() {
      this.isModalSellCardShow = false
      this.selectedCardId = ''
      this.modalSellCardMsg = ''
      this.msgErr = ''
    }
    methods = {
      showMsg(content, type, duration) {
        $Message({
          content: content || 'の (⊙o⊙)? ...',
          duration: duration || 5,
          type: type || 'success'
        })
      },
      handleChange({
        detail
      }) {
        this.current = detail.key
      },
      transDate(created) {
        return dayjs(new Date(created)).fromNow()
      },
      async sellCard(item) {
        await api.sellCard({
          cardId: item.cardId,
          price: 30
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      async buyCard(item) {
        await api.buyGood({
          goodId: item._id
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      async revertCard(item) {
        await api.revertGood({
          goodId: item._id
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      },
      async buyCardPool(item) {
        await api.buyLottery(item._id)
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
      },
      onModalSellCardMsgChanged({
        detail
      }) {
        this.modalSellCardMsg = parseInt(detail.value, 10)
        if (isNaN(this.modalSellCardMsg)) {
          this.msgErr = '要填写数字哦~'
        } else if (this.modalSellCardMsg < 1) {
          this.msgErr = '必须是大于0的，不能白送啊~'
        } else if (this.modalSellCardMsg > 9999) {
          this.msgErr = '不能超过10K的，这么稀有哪舍得卖啊~'
        } else {
          this.msgErr = ''
        }
      },
      tgMSellCardShow(id) {
        this.isModalSellCardShow = !this.isModalSellCardShow
        this.selectedCardId = id
      },
      handleSellCardOKClose() {
        console.log('handleSellCardOKClose', this.selectedCardId, this.modalSellCardMsg)
        api.sellCard({
          cardId: this.selectedCardId,
          price: this.modalSellCardMsg
        })
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
        this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
        this.clearModalSellCard()
      },
      handleSellCardCancelClose() {
        console.log('handleSellCardCancelClose')
        this.clearModalSellCard()
      },
      async openLottery(id) {
        const result = await api.openLottery(id)
        this.methods.showMsg(result.msg, null, 3)
        this.methods.getMyLotterys()
        this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
      }
    }
    onReady() {
      this.methods.getMyBagCards(this.myCardsPage, this.myCardsLimit)
      this.methods.getAllGoods(this.goodsPage, this.goodsLimit)
      this.methods.getMyLotterys()
      this.methods.getCardPools()
    }
  }
</script>
