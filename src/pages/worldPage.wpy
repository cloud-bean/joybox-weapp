<style scoped>
  .title {
    color: #1c2438;
    font-size: 24px;
    display: block;
    padding: 5px;
  }
  .sub-title {
    color: #80848f;
    font-size: 12px;
    display: block;
    padding: 5px;
  }
  .content {
    color: #495060;
    font-size: 18px;
    display: block;
    padding: 5px;
  }
  .cover-image {
    width: 100%;
  }
  .layout {
    margin: 0;
    padding: 0;
  }
  .news-box {
    background-color: aquamarine;
  }
  .timelines-panel {
    background-color: burlywood;
  }
</style>

<template>
  <view class="layout">
    <view class="news-box">
      <view wx:if="{{documents.length > 0}}">
        <repeat for="{{documents}}" key="index" index="index" item="doc">
          <view class="title">{{ doc.title }}</view>
          <view class="sub-title">{{ doc.subTitle }}</view>
          <image src="{{doc.file.URL}}"/>
        </repeat>
      </view>
      <view wx:else>
        nothing left ~
      </view>

      <i-page current="{{ docPage }}" total="{{ docTotalPage }}" bind:change="handleDocPageChange">
        <view slot="prev">
          <i-icon type="return"></i-icon>
          上一页
        </view>
        <view slot="next">
          下一页
          <i-icon type="enter"></i-icon>
        </view>
      </i-page>
    </view>

    <i-modal title="留言" visible="{{ isModalShow }}" bind:ok="handleOKClose" bind:cancel="handleCancelClose">
      <view>
        <input value="{{modalMsg}}" bindinput="onModalMsgChanged" placeholder="sth..."/>
      </view>
    </i-modal>

    <view class="timelines-panel">
      <view wx:if="{{timelines.length > 0}}">
        <repeat for="{{timelines}}" key="index" index="index" item="item">
          <view>
            <timeline-item :tlData="item" @onLike.user="like" @onComment.user="comment"
            :imgSrc="item.user.profileImageURL || 'https://i.loli.net/2017/08/21/599a521472424.jpg'"></timeline-item>
            <i-button inline type="primary" @tap="like({{item._id}})">点赞</i-button>
            <i-button inline @tap="toggleModalVisable({{item._id}})">留言</i-button>
          </view>
        </repeat>
      </view>
      <view wx:else>
        nothing left ~
      </view>
      <i-page current="{{ timelinePage }}" total="{{ tlTotalPage }}" bind:change="handleTimelinePageChange">
        <view slot="prev">
          <i-icon type="return"></i-icon>
          上一页
        </view>
        <view slot="next">
          下一页
          <i-icon type="enter"></i-icon>
        </view>
      </i-page>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import { getTimelines, getDocuments, upVote, addMsg2Timeline } from '../store/actions'
  import TimelineItem from '../components/timelineItem'
  import dayjs from '../utils/dayJS'
  @connect({
    timelines(state) {
      return state.world.timelines.map(item => {
        let newItem = {...item}
        newItem.created = dayjs(item.created).fromNow()
        let messages = []
        if (newItem.messages.length > 0) {
          newItem.messages.map(msg => {
            let newMsg = {...msg}
            newMsg.created = dayjs(msg.created).fromNow()
            messages.push(newMsg)
          })
        }
        newItem.messages = messages
        return newItem
      })
    },
    documents(state) {
      return state.world.documents
    },
    timelineCount(state) {
      return state.world.totalTimelineCount
    },
    docCount(state) {
      return state.world.totalDocumentCount
    }
  }, {
    getTimelines,
    getDocuments,
    upVote,
    addMsg2Timeline
  })
  export default class worldPage extends wepy.page {
    data = {
      timelinePage: 1,
      timelineLimit: 30,
      docPage: 1,
      docLimit: 1,
      isModalShow: false,
      modalMsg: ''
    }
    config = {
      usingComponents: {
        'i-page': '/iview/page/index',
        'i-icon': '/iview/icon/index',
        'i-button': '/iview/button/index',
        'i-modal': '/iview/modal/index'
      }
    }
    components = {
      'timeline-item': TimelineItem
    }
    computed = {
      tlTotalPage () {
        return Math.ceil(this.timelineCount / this.timelineLimit)
      },
      docTotalPage () {
        return Math.ceil(this.docCount / this.docLimit)
      }
    }

    clearModal () {
      this.isModalShow = false
      this.modalMsg = ''
      this.selectedId = ''
    }

    methods = {
      handleDocPageChange({ detail }) {
        const type = detail.type
        if (type === 'next') {
          this.docPage = this.docPage + 1
        } else if (type === 'prev') {
          this.docPage = this.docPage - 1
        }
        this.methods.getDocuments(this.docPage, this.docLimit)
      },
      handleTimelinePageChange({ detail }) {
        const type = detail.type
        if (type === 'next') {
          this.timelinePage = this.timelinePage + 1
        } else if (type === 'prev') {
          this.timelinePage = this.timelinePage - 1
        }
        this.methods.getTimelines(this.timelinePage, this.timelineLimit)
      },
      like(id) {
        console.log('on like: ', id)
        this.methods.upVote(id)
        this.methods.getTimelines(this.timelinePage, this.timelineLimit)
      },
      comment(id, msg) {
        console.log('on comment', id, msg)
        this.methods.addMsg2Timeline(id, msg)
        this.methods.getTimelines(this.timelinePage, this.timelineLimit)
      },
      toggleModalVisable(id) {
        this.isModalShow = !this.isModalShow
        this.selectedId = id
        console.log('this.selectedId', this.selectedId)
      },
      onModalMsgChanged({ detail }) {
        console.log('onModalMsgChanged', detail)
        this.modalMsg = detail.value
      },
      handleOKClose() {
        console.log('this.selectedId, this.modalMsg: ', this.selectedId, this.modalMsg)
        this.methods.addMsg2Timeline(this.selectedId, this.modalMsg)
        this.methods.getTimelines(this.timelinePage, this.timelineLimit)
        this.clearModal()
      },
      handleCancelClose() {
        this.clearModal()
      }
    }
    onReady() {
      this.methods.getTimelines(this.timelinePage, this.timelineLimit)
      this.methods.getDocuments(this.docPage, this.docLimit)
    }
  }
</script>
