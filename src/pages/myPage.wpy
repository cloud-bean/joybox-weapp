<style scoped>
  .layout {
    border: 1px solid #d7dde4;
    background: #f5f7f9;
  }
</style>
<template>
  <div class="layout">
    <i-card title="{{user.displayName}}" extra="等级： {{level}}" thumb="{{user.profileImageURL || 'https://i.loli.net/2017/08/21/599a521472424.jpg'}}">
      <view slot="footer">
        <i-badge count="1.3" style="margin: 0 10px;  color: green !important;">
          <i-icon type="flashlight" size="36" color="gold" />
        </i-badge>
        <i-badge count="1.8" style="margin: 0 10px;">
          <i-icon type="redpacket" size="36" color="red" />
        </i-badge>
        <i-badge count="2.6" style="margin: 0 10px;" i-class="demo">
          <i-icon type="integral" size="36" color="brown" />
        </i-badge>
      </view>
      <view slot="content">
        <i-tag style="margin: 0 10px;" class="i-tags" type="border">
          悦币： 143
        </i-tag>
        <i-tag style="margin: 0 10px;" class="i-tags" type="border">
          经验：225
        </i-tag>
      </view>
    </i-card>
  </div>
</template>
<script>
  import wepy from 'wepy'
  import {
    connect
  } from 'wepy-redux'
  var moment = require('moment')
  moment.locale('zh-cn')
  @connect({
    user(state) {
      const newUser = { ...state.user
      }
      newUser.created = moment(new Date(state.user.created)).toNow(true)
      return newUser
    }
  })
  export default class myPage extends wepy.page {
    config = {
      usingComponents: {
        'i-card': '/iview/card/index',
        'i-tag': '/iview/tag/index',
        'i-badge': '/iview/badge/index',
        'i-icon': '/iview/icon/index'
      }
    }
    computed = {
      level() {
        if (!this.user) {
          return 0
        }
        const experience = this.user.option.exp
        const levelExp = [50, 100, 200, 350, 550, 800, 1100, 1450, 1850, 2300, 2800, 3350, 3950, 4600, 5300, 6050, 6850, 7700, 8600, 9550]
        const maxlevel = levelExp.length
        for (const key in levelExp) {
          if (experience < levelExp[key]) return Number(key) + 1
        }
        console.log('enter level func', experience, maxlevel)
        return maxlevel
      }
    }
  }
</script>
