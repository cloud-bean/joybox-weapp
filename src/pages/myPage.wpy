<style scoped>
  .layout {
    border: 1px solid #d7dde4;
    background: #f5f7f9;
  }
</style>
<template>
  <div class="layout">
    <view>
       <i-avatar src="{{user.profileImageURL || 'https://i.loli.net/2017/08/21/599a521472424.jpg'}}"
        size="large" shape="circle"></i-avatar>
        {{user.displayName}} - {{user.created}}
        <image src="/assets/images/level.png" style="width: 20px; height: 20px;"/>
        等级{{level}}
        <image src="/assets/images/exp.png" style="width: 20px; height: 20px;"/>
        经验值{{user.option.exp}}
        <image src="/assets/images/gold.png" style="width: 20px; height: 20px;"/>
        悦币{{user.option.goldToken}}
    </view>
    <view slot="footer">
      <i-badge count="1.3" style="margin: 0 10px;">
        <i-icon type="flashlight" size="36" color="purple" />
      </i-badge>
      <!--<i-badge count="1.8" style="margin: 0 10px;">-->
        <!--<i-icon type="redpacket" size="36" color="red" />-->
      <!--</i-badge>-->
      <!--<i-badge count="2.6" style="margin: 0 10px;" i-class="demo">-->
        <!--<i-icon type="integral" size="36" color="brown" />-->
      <!--</i-badge>-->
    </view>
    <view>
      <keepBar :keepInfo="keepInfo"></keepBar>
    </view>
    <view>
      {{ rank.me }}
    </view>
    <view>
      排行，荣耀
    </view>
  </div>
</template>
<script>
  import wepy from 'wepy'
  import KeepBar from '../components/keepBar'
  import { getMyBagCards, getRank } from '../store/actions'
  import {
    connect
  } from 'wepy-redux'
  const moment = require('moment')
  moment.locale('zh-cn')
  @connect({
    user(state) {
      const newUser = { ...state.user
      }
      newUser.created = moment(new Date(state.user.created)).toNow(true)
      return newUser
    },
    keepInfo(state) {
      return state.mine.keepInfo
    },
    myBagCards(state) {
      return state.mine.myBagCards
    },
    rank(state) {
      return state.mine.rank
    }
  }, {
    getMyBagCards,
    getRank
  })
  export default class myPage extends wepy.page {
    config = {
      usingComponents: {
        'i-card': '/iview/card/index',
        'i-tag': '/iview/tag/index',
        'i-badge': '/iview/badge/index',
        'i-icon': '/iview/icon/index',
        'i-grid': '/iview/grid/index',
        'i-grid-item': '/iview/grid-item/index',
        'i-grid-icon': '/iview/grid-icon/index',
        'i-grid-label': '/iview/grid-label/index',
        'i-avatar': '/iview/avatar/index'
      }
    }
    components = {
      keepBar: KeepBar
    }
    computed = {
      level() {
        if (!this.user) {
          return 0
        }
        const experience = this.user.option.exp
        const levelExp = [50, 100, 200, 350, 550, 800, 1100, 1450, 1850, 2300, 2800, 3350, 3950, 4600, 5300, 6050, 6850, 7700, 8600, 9550]
        const maxlevel = levelExp.length
        for (const key in levelExp) {
          if (experience < levelExp[key]) return Number(key) + 1
        }
        console.log('enter level func', experience, maxlevel)
        return maxlevel
      }
    }
    onReady() {
      this.methods.getMyBagCards()
      this.methods.getRank()
    }
  }
</script>
